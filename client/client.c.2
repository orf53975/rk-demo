#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/shm.h>

#define MYPORT  8887
#define QUEUE   20
#define BUFFER_SIZE 1024

char console[BUFFER_SIZE] = 0;

int main()
{
    ///¿¿sockfd
    int server_sockfd = socket(AF_INET,SOCK_STREAM, 0);

    ///¿¿sockaddr_in
    struct sockaddr_in server_sockaddr;
    server_sockaddr.sin_family = AF_INET;
    server_sockaddr.sin_port = htons(MYPORT);
    server_sockaddr.sin_addr.s_addr = htonl(INADDR_ANY);

    ///bind¿¿¿¿¿0¿¿¿¿¿-1
    if(bind(server_sockfd,(struct sockaddr *)&server_sockaddr,sizeof(server_sockaddr))==-1)
    {
        perror("bind");
        exit(1);
    }

    ///listen¿¿¿¿¿0¿¿¿¿¿-1
    if(listen(server_sockfd,QUEUE) == -1)
    {
        perror("listen");
        exit(1);
    }

    ///¿¿¿¿¿¿
    char buffer[BUFFER_SIZE];
	
    struct sockaddr_in client_addr;
    socklen_t length = sizeof(client_addr);

    ///¿¿¿¿¿¿¿¿¿¿¿¿¿¿-1
    int conn = accept(server_sockfd, (struct sockaddr*)&client_addr, &length);
    if(conn<0)
    {
        perror("connect");
        exit(1);
    }

	
	
    while(1)
    {
        memset(console,0,sizeof(console));
        int len = recv(conn, console, sizeof(console),0);
        if(strcmp(buffer,"exit\n")==0)
            break;
		
		/*
		¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿recv¿¿¿¿¿¿¿¿¿¿¿¿¿¿()¿¿¿
		*/
			
		 if(strcmp(console, buffer) == 0)
		 {
			memset(buffer,0,sizeof(buffer));
			len = recv(conn, buffer, sizeof(buffer),0);
			printf("%s", buffer);
			memset(buffer,0,sizeof(buffer));
			len = recv(conn, buffer, sizeof(buffer),0);
			printf("%s", buffer);
			
		}else{
			printf("%s", console);
			//printf("%s", buffer);
		}
		printf("\nlen : %d\n", len);
		memset(buffer,0,sizeof(buffer));
		while(fgets(buffer, sizeof(buffer), stdin) != NULL)
		{
			send(conn, buffer, sizeof(buffer), 0);
			break;
		}
		
		        
    }
    close(conn);
    close(server_sockfd);
    return 0;
}
